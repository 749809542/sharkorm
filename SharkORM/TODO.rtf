{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf760
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
Investigate non-dynamic properties from a Swift class in Objective C\
	investigated, properties just don't show up so remain incompatible.  Plan B is still to create  a class type just for swift.\
\
Create a swift SRKObject version, to convert swift basic types into OBJ-C compatible objects for storage.\
\
\strike \strikec0 Make profiling of test units work so we don't need a console target for testing.\
	Discussed with engineer, it's a bug. Workaround was to create a UI application that the unit tests can be injected into.\strike0\striked0 \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs28 \cf0 for (SRKTransactionElement* item in self.transactionItems) \{\
								\
								@autoreleasepool \{\
									\
									[item.originalObject setBase];\
									\
									/* check to see if this object is a fts object and clear the existing row */\
									if ([[item.originalObject class] FTSParametersForEntity]) \{\
										if ([item.originalObject.Id isKindOfClass:[NSNumber class]]) \{\
											[SharkORM executeSQL:[NSString stringWithFormat:@"DELETE FROM fts_%@ WHERE docid = %@;", [[item.originalObject class] description], [item.originalObject getField:SRK_DEFAULT_PRIMARY_KEY_NAME]] inDatabase:nil];\
										\} else \{\
											[SharkORM executeSQL:[NSString stringWithFormat:@"DELETE FROM fts_%@ WHERE docid = '%@;'", [[item.originalObject class] description], [item.originalObject getField:SRK_DEFAULT_PRIMARY_KEY_NAME]] inDatabase:nil];\
										\}\
									\}\
									\
									if (item.eventType == SharkORMEventInsert) \{\
										\
										NSMutableString* propertiesList = [NSMutableString new];\
										for (NSString* p in [[item.originalObject class] FTSParametersForEntity]) \{\
											if (propertiesList.length > 0) \{\
												[propertiesList appendString:@", "];\
											\}\
											[propertiesList appendString:p];\
										\}\
										\
										if ([item.originalObject.Id isKindOfClass:[NSNumber class]]) \{\
											[SharkORM executeSQL:[NSString stringWithFormat:@"INSERT INTO fts_%@(docid, %@) SELECT Id, %@ FROM %@ WHERE Id = %@", [[item.originalObject class] description],propertiesList,propertiesList, [[item.originalObject class] description], [item.originalObject getField:SRK_DEFAULT_PRIMARY_KEY_NAME]] inDatabase:nil];\
										\} else \{\
											[SharkORM executeSQL:[NSString stringWithFormat:@"INSERT INTO fts_%@(docid, %@) SELECT Id, %@ FROM %@ WHERE Id = '%@'", [[item.originalObject class] description],propertiesList,propertiesList, [[item.originalObject class] description], [item.originalObject getField:SRK_DEFAULT_PRIMARY_KEY_NAME]] inDatabase:nil];\
										\}\
										\
										[item.originalObject entityDidInsert];\
										if (!item.originalObject.exists) \{\
											/* now we need to register this object with the default registry, first check to see if the user wants a default domain */\
											item.originalObject.exists = YES;\
											if ([SharkORM getSettings].defaultManagedObjects) \{\
												[item.originalObject setManagedObjectDomain:[SharkORM getSettings].defaultObjectDomain];\
											\}\
										\}\
										item.originalObject.exists = YES;\
										\
										/* now send out the live message as well as tiggering the local event */\
										\
										if (![item.originalObject.class entityDoesNotRaiseEvents]) \{\
											SRKEvent* e = [SRKEvent new];\
											e.event = SharkORMEventInsert;\
											e.entity = item.originalObject;\
											e.changedProperties = item.originalObject.modifiedFieldNames;\
											[[SRKRegistry sharedInstance] broadcast:e];\
										\}\
										\
										/* clear the modified fields list */\
										@synchronized(item.originalObject.changedValues) \{\
											[item.originalObject.changedValues removeAllObjects];\
											[item.originalObject.dirtyFields removeAllObjects];\
                                            item.originalObject.dirty = NO;\
										\}\
										\
									\}\
									if (item.eventType == SharkORMEventUpdate) \{\
										\
										NSMutableString* propertiesList = [NSMutableString new];\
										for (NSString* p in [[item.originalObject class] FTSParametersForEntity]) \{\
											if (propertiesList.length > 0) \{\
												[propertiesList appendString:@", "];\
											\}\
											[propertiesList appendString:p];\
										\}\
										\
										if ([item.originalObject.Id isKindOfClass:[NSNumber class]]) \{\
											[SharkORM executeSQL:[NSString stringWithFormat:@"INSERT INTO fts_%@(docid, %@) SELECT Id, %@ FROM %@ WHERE Id = %@", [[item.originalObject class] description],propertiesList,propertiesList, [[item.originalObject class] description], [item.originalObject getField:SRK_DEFAULT_PRIMARY_KEY_NAME]] inDatabase:nil];\
										\} else \{\
											[SharkORM executeSQL:[NSString stringWithFormat:@"INSERT INTO fts_%@(docid, %@) SELECT Id, %@ FROM %@ WHERE Id = '%@'", [[item.originalObject class] description],propertiesList,propertiesList, [[item.originalObject class] description], [item.originalObject getField:SRK_DEFAULT_PRIMARY_KEY_NAME]] inDatabase:nil];\
										\}\
										\
										[item.originalObject entityDidUpdate];\
										\
										/* now send out the live message as well as triggering the local event */\
										if (![item.originalObject.class entityDoesNotRaiseEvents]) \{\
											SRKEvent* e = [SRKEvent new];\
											e.event = SharkORMEventUpdate;\
											e.entity = item.originalObject;\
											e.changedProperties = item.originalObject.modifiedFieldNames;\
											[[SRKRegistry sharedInstance] broadcast:e];\
										\}\
										\
										/* clear the modified fields list */\
										@synchronized(item.originalObject.changedValues) \{\
											[item.originalObject.changedValues removeAllObjects];\
											[item.originalObject.dirtyFields removeAllObjects];\
                                            item.originalObject.dirty = NO;\
										\}\
										\
									\}\
									if (item.eventType == SharkORMEventDelete) \{\
										[item.originalObject entityDidDelete];\
										item.originalObject.exists = NO;\
										\
										/* now send out the live message as well as tiggering the local event */\
										\
										if (![item.originalObject.class entityDoesNotRaiseEvents]) \{\
											SRKEvent* e = [SRKEvent new];\
											e.event = SharkORMEventDelete;\
											e.entity = item.originalObject;\
											e.changedProperties = nil;\
											[[SRKRegistry sharedInstance] broadcast:e];\
										\}\
										\
										/* clear the modified fields list */\
										@synchronized(item.originalObject.changedValues) \{\
											[item.originalObject.changedValues removeAllObjects];\
											[item.originalObject.dirtyFields removeAllObjects];\
                                            item.originalObject.dirty = NO;\
										\}\
										\
										/* now remove the primary key now the event has been broadcast */\
										item.originalObject.Id = nil;\
									\}\
									\
								\}\
								\
							\}\
						\}
\f0\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
}